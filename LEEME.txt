docker run -it --rm \
  -p 9090:9090 \
  -e "defaultBalance=100000" \
  -e "showQueryString=true" \
  -e "showBody=true" \
  -e "formatJson=true" \
  -e "preapprove=maxCpuTimeOfOneTx:20"\
  --name tron \
  trontools/quickstart







            const web3 = await getWeb3();
            // Use web3 to get the user's accounts.
            const accounts = await web3.eth.getAccounts();

            // const networkId       = await web3.eth.net.getId();
            // const deployedNetwork = Cryptobillions.networks[networkId];
            // const instance        = new web3.eth.Contract( Cryptobillions.abi, deployedNetwork && deployedNetwork.address);

            const instance        = new web3.eth.Contract( Cryptobillions.abi, cryptoVar.contractAddress);
            const nonce           = await web3.eth.getTransactionCount(accounts[0]);

            let gasPrice = await axios({
                method:"get",
                url:"https://ethgasstation.info/json/ethgasAPI.json"
            }).then(result => result.data.average / 10 );

            gasPrice = await web3.utils.toWei(gasPrice.toString(),"gwei");

            let optionSend = (gas) =>({
                nonce,
                gasPrice,
                gas,
                from: accounts[0],
                to:cryptoVar.contractAddress, // la direccion del contrato
                value: web3.utils.toWei("0.09", "ether"),
                data: web3.eth.abi.encodeFunctionSignature('whitdrawETH()')
            });


            let optionGas = {
                nonce,
                from: accounts[0],
                to:cryptoVar.contractAddress, // la direccion del contrato
                value: web3.utils.toWei("0.09", "ether"),
                data: web3.eth.abi.encodeFunctionSignature('whitdrawETH()')
            };

            // // return await instance.methods;
            // let options = {
            //     nonce,
            //     gasPrice:web3.utils.toWei("50", "gwei"),
            //     gas:2000000,
            //     from: accounts[0],
            //     to:cryptoVar.contractAddress, // la direccion del contrato
            //     value: web3.utils.toWei("0.09", "ether"),
            //     data: web3.eth.abi.encodeFunctionSignature('whitdrawETH()')
            // };
            let userToRegister  = await instance.methods.users(accounts[0]).call();
            if(userToRegister.id !== "0"){
                handleState({loading:false});
                return  props.history.push("/dashboard/?user=" + userToRegister.id)
            }


            // valida si es un id o un add
            if(state.address.length < 18 && instance){
               try{
                   let x = await instance.methods.idToAddress(state.address).call();
                   let referido = await instance.methods.users(x).call();


                   if(userToRegister.id === "0"){
                       // consulta le id
                       await VerificaId(Number(referido.id))
                           .then(async () =>{
                               try {
                                   let gasStimate = await instance.methods.registrationExt(x).estimateGas(optionGas);
                                   let r =          await instance.methods.registrationExt(x).send(optionSend(gasStimate));

                                   axios({
                                       url:`${cryptoVar.api}/api/v1/account/registrationExt`,
                                       method:"post",
                                       contentType: "application/json",
                                       data:{
                                           wallet:accounts[0],
                                           referrer:x
                                       }})
                                       .then(async result =>{
                                           console.log(result,"respondio el api de registor de usuario.");
                                           handleState({loading:false});
                                           props.SeTDataDash({
                                               userId:r.events.Registration.returnValues.userId,
                                               minihash: result.data.minihash
                                           });
                                           props.history.push("/dashboard/?user=" + r.events.Registration.returnValues.userId  )
                                       })
                                       .catch(e=>{
                                           handleState({loading:false});
                                           console.log(e,"No se registró el usuario en el api.")
                                       });
                               }
                               catch (e) {
                                   handleState({loading:false,error:true});
                                   hanldeModal({
                                       status:true,
                                       title:t("transaction_reject"),
                                       description: "",
                                       icon:"cancel",
                                   });
                                   console.log(e,"Hubo un error haciendo el registro.");
                               }
                           })
                           .catch(()=>{
                               console.log("El referido no está registrado.");
                               SetS({
                                   ...state,
                                   loadingAuth:false,
                               });
                               hanldeModal({
                                   status:true,
                                   title:t("address_not_found"),
                                   description: <span>La dirección de wallet <b>{accounts[0].substring(0,22) + "..."}</b> no se encuentra registrada.</span>,
                                   icon:"cancel",
                               });
                               console.log("El referido no está registrado.")
                           })
                   }
                   else{
                       handleState({loading:false,error:true});
                       hanldeModal({
                           status:true,
                           title:t("address_not_found"),
                           description: "",
                           icon:"cancel",
                       });
                       console.log("la cuenta que intenta registrar, ya está registrada.")
                   }
               }
               catch (e) {
                   handleState({loading:false,error:true});
                   hanldeModal({
                       status:true,
                       title:t("address_not_found"),
                       description: "",
                       icon:"cancel",
                   })
               }
            }

            // consulta normal si es un address
            else{
                try{
                    let gasStimate = await instance.methods.registrationExt(state.address).estimateGas(optionGas);
                    let r = await instance.methods.registrationExt(state.address).send(optionSend(optionSend(gasStimate)));
                    axios({
                        url:`${cryptoVar.api}/api/v1/account/registrationExt`,
                        method:"post",
                        contentType: "application/json",
                        data:{
                            wallet:accounts[0],
                            referred: state.address
                        }})
                        .then(async result =>{
                            console.log(result,"respondio el api de registor de usuario.");
                            handleState({loading:false});
                            props.SeTDataDash({
                                userId:r.events.Registration.returnValues.userId,
                                minihash: result.data.minihash
                            });
                            props.history.push("/dashboard/?user=" + r.events.Registration.returnValues.userId  )
                        })
                        .catch(e=>{
                            handleState({loading:false});
                            console.log(e,"No se registró el usuario en el api.")
                        });
                } catch (e) {
                    alert("la dirección de la billetera no existe.");
                    handleState({loading:false,error:true})
                }
            }
 (base58) TFVd396i4jC5Xwbgn8VouTUiDLzprso5zq
 (hex) 413c992c02fcfe98620124c87ee5af52f4817c066c

// direccion del contrato
THhnbVsnygkapcJ7pwfjqfzNNiG3jDBHUB
4154d664c08e65a7e60e4ce3e0d40dcbcf53dfb00e

// dueño del contrato
TT97NPy8GSL9db974fpzWdURyVjX6h7XyT
ab40e95a2f99cc0a119903f3bbe4329d97f1b7a65186cb83df34677d86c427fe


https://shasta.tronscan.org/#/contract/TQYRYRMDCc18NxsbJL4pife5fTxXkoB9md



////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////


var tronWeb = window.tronWeb;

            const options = {
                feeLimit: 1000000000,
                callValue: 700000000,
                shouldPollResponse:true,
            };

            let contract_address = "4154d664c08e65a7e60e4ce3e0d40dcbcf53dfb00e";
            const parameters = [{type:'address',value:'TT97NPy8GSL9db974fpzWdURyVjX6h7XyT'}];
            const issuerAddress = tronWeb.defaultAddress.base58;
            const functionSelector = 'registrationExt(address)';


            let transactionObject = await tronWeb.transactionBuilder.triggerSmartContract (
                contract_address,
                functionSelector,
                options,
                parameters,
                tronWeb.address.toHex(issuerAddress)
            );

            if (!transactionObject.result || !transactionObject.result.result)
                return console.error('Unknown error: ', null, 2);

            // Signing the transaction
            const signedTransaction = await tronWeb.trx.sign(transactionObject.transaction);

            if (!signedTransaction.signature) {
                return console.error('Transaction was not signed properly');
            }

            // Broadcasting the transaction
            const broadcast = await tronWeb.trx.sendRawTransaction(signedTransaction);
            console.log(`broadcast:`,broadcast);
